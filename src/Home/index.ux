<template>
    <!-- template里只能有一个根节点 -->
    <stack>
        <map if="{{!showList}}" id="map" markers="{{markers}}" @markertap="markerTap" showmylocation="{{showmylocation}}" @tap="tap"
        />
        <div if="{{showList}}">
            <list class="list-content" onscroll="handleScroll" onscrollbottom="scrollbottom" id="list" scrollpage="{{scrollPage}}">
                <!-- 列表元素，属性type值相同时，需要确保渲染中dom结构相同 -->
                <list-item type="listItem" class="item item-color" for="{{listData}}">
                    <text class="txt">{{$item.content}}</text>
                    <div class="image-container" if="$item.imageUrls">
                        <div class="image-item" for="url in $item.imageUrls">
                            <image if="{{url}}" src="{{url}}" alt="" class="detail-icon" />
                        </div>
                    </div>
                </list-item>

                <!-- 加载更多 -->
                <list-item type="loadMore" class="load-more" if="{{loadMore}}">
                    <progress type="circular"></progress>
                    <text>加载更多</text>
                </list-item>
            </list>
        </div>
        <div class="container">
            <div class="header-container">
                <div class="avatar-container" onclick="goProfile">
                    <img src="https://avatars3.githubusercontent.com/u/16489708?s=460&v=4" alt="" class="avatar" />
                </div>
                <div class="name-container">
                    <text class="name">{{username}}</text>
                </div>
                <div if="{{!showList}}" class="icon-container" onclick="getCenterLocation">
                    <img src="../Images/pai.png" alt="" class="write-icon" />
                </div>
                <div if="{{showList}}" class="icon-container" />
            </div>
            <div class="type-container">
                <img if="{{!showList}}" src="../Images/list.png" alt="" class="type-icon" onclick="handleShowList" />
                <img if="{{showList}}" src="../Images/map.png" alt="" class="type-icon" onclick="handleShowList" />
            </div>
        </div>
        <div if="{{showDetail}}" class="method">
            <div class="method-container">
                <div class="detail-header" onclick="closeDetail">
                    <img src="../Images/close.png" alt="" class="type-icon" />
                </div>
                <div class="detail-container">
                    <div>
                        <text class="content-label">{{detailData.content}}</text>
                    </div>
                    <div class="image-container">
                        <div class="image-item" for="{{detailData.imageUrls}}">
                            <image src="{{$item}}" alt="" class="detail-icon" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </stack>
</template>

<style>
    .container {
        width: 100%;
        flex-direction: column;
    }

    .header-container {
        padding: 15px;
        flex-direction: row;
        height: 140px;
        width: 100%;
        background-color: bisque;
    }

    .avatar-container {
        flex: 1;
        padding: 5px;
    }

    .avatar {
        height: 100px;
        width: 100px;
        border-radius: 50px;
    }

    .name-container {
        flex: 1;
        justify-content: center;
        align-items: center;
    }

    .name {
        font-size: 30px;
        font-weight: bold;
    }

    .icon-container {
        flex: 1;
        align-items: center;
        justify-content: flex-end;
        padding-right: 20px;
    }

    .icon-container:active {
        background-color: #dfe6e9;
    }

    .write-icon {
        height: 50px;
        width: 50px;
    }

    .type-icon {
        height: 70px;
        width: 70px;
        padding: 10px;
    }

    .type-container {
        width: 100%;
        justify-content: flex-end;
        padding: 20px;
    }

    .btn {
        width: 550px;
        height: 86px;
        margin-top: 75px;
        border-radius: 43px;
        background-color: #09ba07;
        font-size: 30px;
        color: #ffffff;
    }

    .item-color {
        background-color: #ffffff;
    }

    .load-more {
        justify-content: center;
        align-items: center;
        height: 100px;
        border-color: #bbbbbb;
        border-bottom-width: 1px;
    }

    .list-content {
        flex: 1;
        padding-top: 150px;
        background-color: #dfe6e9;
    }

    .item {
        margin-bottom: 10px;
        padding: 20px;
        flex-direction: column;
    }

    .method {
        flex-direction: column;
        justify-content: flex-end;
        width: 100%;
    }

    .method-container {
        background-color: #ffffff;
        flex-direction: column;
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
    }

    .detail-header {
        flex: 1;
        justify-content: flex-end;
        padding-right: 10px;
    }

    .detail-container {
        padding-left: 20px;
        padding-right: 20px;
        padding-bottom: 20px;
        flex-direction: column;
    }

    .image-container {
        flex-wrap: wrap;
        padding-left: 30px;
        padding-top: 30px;
        padding-bottom: 30px;
    }

    .content-label {
        color: #000000;
        font-size: 35px;
    }

    .detail-icon {
        margin-bottom: 10px;
        height: 200px;
        width: 200px;
    }

    .image-item {
        margin-right: 10px;
    }

    .txt {
        color: #000000;
    }
</style>

<script>
    import router from '@system.router'
    import prompt from '@system.prompt'
    import fetch from '@system.fetch'
    import storage from '@system.storage'

    export default {
        // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
        private: {
            title: '示例页面',
            showList: false,
            listData: [],
            showmylocation: true,
            showDetail: false,
            markers: [],
            username: '未登录',
            userId: '',
            isLogin: false,
            detailData: {
                "id": "",
                "content": "",
                "lat": "",
                "lon": "",
                "add_time": "",
                "imageUrls": null,
            },
        },
        onInit() {
            // 初始化列表数据
            this.getUserInfo()
        },
        onShow() {
            // 页面被切换显示时，从数据中检查是否有页面B传递来的数据
            if (this.$app.$data.Add && this.$app.$data.Add.gotoPage === 'Home') {
                // 从数据中获取回传给本页面的数据
                const data = this.$app.$data.Add.params
                this.$app.$data.Add = {}
                this.getRecord()
            }
        },
        routeDetail(latitude, longitude) {
            // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
            router.push({
                uri: '/Add',
                params: { latitude: latitude, longitude: longitude }
            })
        },
        handleShowList() {
            if (!this.showList) {
                this.showDetail = false
            }
            this.showList = !this.showList
        },
        getCenterLocation: function () {
            this.$element("map").moveToMyLocation()
            var that = this;
            setTimeout(function () {
                this.$element('map').getCenterLocation({
                    success: function (res) {
                        if (res.latitude && res.longitude) {
                            that.routeDetail(res.latitude, res.longitude)
                        }
                    }
                })
            }.bind(this), 500)

        },
        getRecord() {
            var that = this
            fetch.fetch({
                url: 'http://192.168.30.41:5000/getRecordList',
                method: 'POST',
                data: {
                    userId: this.userId
                },
                success: function (response) {
                    if (response) {
                        const res = JSON.parse(response.data)
                        if (res.code === 0) {
                            const newContent = []
                            res.content.forEach(element => {
                                const newItem = {
                                    id: element.id,
                                    latitude: element.lat,
                                    longitude: element.lon,
                                    coordType: "wgs84",
                                    iconPath: "../Images/marker.png",
                                    // callout: {
                                    //     content: element.content,
                                    //     padding: "20px 5px 20px 5px",
                                    //     borderRadius: "20px",
                                    //     textAlign: "left",
                                    //     display: "always"
                                    // }
                                }
                                newContent.push(newItem)
                            });
                            that.markers = newContent
                            that.listData = res.content
                        } else {
                            prompt.showToast({
                                message: res.msg
                            })
                        }
                    }
                },
                fail: function (err, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        markerTap(res) {
            var that = this;
            this.showDetail = true
            fetch.fetch({
                url: 'http://192.168.30.41:5000/getRecordDetail',
                method: 'POST',
                data: {
                    "detailId": res.markerId
                },
                success: function (response) {
                    if (response) {
                        const res = JSON.parse(response.data)
                        if (res.code === 0) {
                            that.detailData = res.content
                        } else {
                            prompt.showToast({
                                message: res.msg
                            })
                        }
                    }
                },
                fail: function (err, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        closeDetail() {
            this.showDetail = false
        },
        getUserInfo() {
            var that = this
            storage.get({
                key: 'userInfo',
                success: function (data) {
                    if (data) {
                        const newdata = JSON.parse(data)
                        that.username = newdata.username
                        that.userId = newdata.userId
                        that.isLogin = newdata.isLogin
                        that.$app.$data.userId = newdata.userId
                    }
                    that.getRecord()
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                    prompt.showToast({
                        message: "获取登录状态异常"
                    })
                }
            })
        },
        goProfile() {
            if (this.isLogin) {
                var that = this
                storage.set({
                    key: 'userInfo',
                    value: null,
                    success: function (data) {
                        that.isLogin = false
                    }
                })
                prompt.showToast({
                    message: "清除登录状态"
                })
            } else {
                router.push({
                    uri: '/Login',
                })
            }
        }
    }
</script>